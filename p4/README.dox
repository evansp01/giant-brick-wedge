/**

@mainpage 15-410 Project 4

@author Jonathan Ong (jonathao)
@author Evan Palmer (esp)

Data Structures
===============
We maintain a device/server struct for each device and server. All such entries
are kept in a global hashtable. In addition, threads keep a list of devices &
servers that they have registered to. References to the hardware device entries
are also kept in an interrupt table, which allows a universal handler to queue
interrupts for all the necessary devices whenever an interrupt occurs on that
IDT slot.

Reg/dereg

Dealing with interrupts

No need for locks


Readline
========


Serial Print
============

In our serial driver, we have three threads. One for the readline server, one
for the print server, and one for the serial driver. The communication
between the readline server and serial driver is simple because any time the
serial server has new information for readline, it receives an interrupt, and
can communicate with readline. The print server, however needs to communicate
with the serial driver to instruct it to print things at times when it may
be sleeping.

In order to allow for this, we also register the serial driver as a server. It
listens for suggestions to wake up from the print server. This allows the print
server to wake up the serial driver.

Additionally, we would like to call print from within the serial driver to echo
characters from readline, but we cannot use an ipc call due to interference
from interrupts. We use a circular buffer which is polled by the interrupt loop
to echo characters.

*/
