/**

@mainpage 15-410 Project 4

@author Jonathan Ong (jonathao)
@author Evan Palmer (esp)

Data Structures
===============
We maintain a device/server struct for each device and server. All such entries
are kept in a global hashtable. In addition, threads keep a list of devices &
servers that they have registered to. References to the hardware device entries
are also kept in an interrupt table, which allows a universal handler to queue
interrupts for all the necessary devices whenever an interrupt occurs on that
IDT slot.

Universal handlers are installed in IDT slots based on the specifications
provided in the udriv table. These universal handlers run whenever an interrupt
occurs, and queue interrupts for the devices which are registered to the IDT
slot which have owners.

Upon registration, the device/server entry is added to the calling thread's
list. The thread can also specify a port and the number of bytes to retrieve
when an interrupt occurs. This information is stored within the device/server
entry for the universal handler to use when an interrupt occurs.

We ensure that locks are not used within the universal interrupt handler. We use
a lock for accesses to the global hash table, as well as for individual device
& server entries, to ensure that synchronization issues do not occur when
multiple user threads attempt to interact with the same devices/servers
simultaneously.

Readline
========
We moved the bulk of our kernel readline into user space to implement the
readline server. We use two threads in our implementation, one to continuously
process requests from clients, and the other to handle interrupts in a manner
similar to our p3 keyboard driver.

Serial Print
============

In our serial driver, we have three threads. One for the readline server, one
for the print server, and one for the serial driver. The communication
between the readline server and serial driver is simple because any time the
serial server has new information for readline, it receives an interrupt, and
can communicate with readline. The print server, however needs to communicate
with the serial driver to instruct it to print things at times when it may
be sleeping.

In order to allow for this, we also register the serial driver as a server. It
listens for suggestions to wake up from the print server. This allows the print
server to wake up the serial driver.

Additionally, we would like to call print from within the serial driver to echo
characters from readline, but we cannot use an ipc call due to interference
from interrupts. We use a circular buffer which is polled by the interrupt loop
to echo characters.

*/
