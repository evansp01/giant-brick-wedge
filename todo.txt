Things to take note of:
    error handling
        1. recoverable fault -> fix the problem
        2. inform the user -> kill the thread / process
        3. kill the kernel

Stuff to do:
    
    move finalize_exit
    change mutex state check once finalize_exit has been moved
    
    different states for threads suspended by user and by kernel

    use fast mutexes
    
    devices change from task gate to interrupt gate (?) (the one which starts with interrupts disabled)
    
    lock page directory when using vm_write
    
    clean up header files --> move to local headers
    
    check for failure case in malloc calls
    init/install should panic instead of returning errors
    
    double check readfile implementation (look at p2 kernel spec)
    
    exec strlen should fail fast
    
    switch to hash tables for global thread/process lists
    
    mutex unlock, schedule (interrupts disabled) function collapse
    
    change lprintf to also printf to console (non-simics functionality)
    
    change print, cursor implementation (put all bytes then set cursor)
    
    run all tests
    
    readline
        keep two buffers, scancodes and chars
        process only if readline is active
        disable interrupts
    
    tests to write
        readline multithreaded
        print multithreaded
        